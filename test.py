import tensorflow as tf
import numpy as np
import cv2
import os

#
# print(tf.__version__)
# print(tf.test.is_gpu_available())
# tf.config.list_physical_devices('GPU')

# from tensorflow.python.client import device_lib
# print(device_lib.list_local_devices())

tf.compat.v1.disable_eager_execution()

# file = "1-1.png"
# a = cv2.resize(cv2.imread(os.path.join(os.getcwd(), "A/", file), 1), (256, 256))
# a1 = cv2.resize(cv2.imread(os.path.join(os.getcwd(), "A/", file), 1).astype(np.float32), (256, 256))
# # a = cv2.resize(cv2.imread(os.path.join(os.getcwd(), "A", file), 1).astype(np.float32), (256, 256))
# b = cv2.resize(cv2.imread(os.path.join(os.getcwd(), "B/", file), 1), (256, 256))
# b1 = cv2.resize(cv2.imread(os.path.join(os.getcwd(), "B/", file), 1).astype(np.float32), (256, 256))
# # b = cv2.resize(cv2.imread(os.path.join(os.getcwd(), "B", file), 1).astype(np.float32), (256, 256))
a = np.array([[[[1.2834557, 1.4683022, 0.5946915],
                   [1.0228429, 1.5750624, 0.80770457],
                   [1.0638641, 1.1896071, 0.4787041],
                   [1.0277432, 0.6934045, 1.0249577],
                   [0.19050634, 1.057025, 0.44472182],
                   [1.3056083, 0.5151022, 1.0531322]],

                  [[1.2351526, 1.0919478, 0.9372109],
                   [1.5517414, 1.5060828, 0.35573858],
                   [1.0651671, 1.0787325, 0.47671747],
                   [1.7694534, 1.0008664, 0.32191408],
                   [1.0490249, 1.225679, 0.43457556],
                   [0.12941921, 0.6514527, 1.0955144]],

                  [[1.9279069, 1.8742791, 0.7065265],
                   [0.9121938, 1.4657009, 0.23585856],
                   [0.6494664, 1.8175879, 0.54270506],
                   [0.88719857, 1.2533717, 0.2260133],
                   [0.4808811, 1.3740282, 0.6581123],
                   [0.62408185, 1.3522696, 1.1172768]], ],

                 [[[1.2834557, 1.4683022, 0.5946915],
                   [1.0228429, 1.5750624, 0.80770457],
                   [1.0638641, 1.1896071, 0.4787041],
                   [1.0277432, 0.6934045, 1.0249577],
                   [0.19050634, 1.057025, 0.44472182],
                   [1.3056083, 0.5151022, 1.0531322]],

                  [[1.2351526, 1.0919478, 0.9372109],
                   [1.5517414, 1.5060828, 0.35573858],
                   [1.0651671, 1.0787325, 0.47671747],
                   [1.7694534, 1.0008664, 0.32191408],
                   [1.0490249, 1.225679, 0.43457556],
                   [0.12941921, 0.6514527, 1.0955144]],

                  [[1.9279069, 1.8742791, 0.7065265],
                   [0.9121938, 1.4657009, 0.23585856],
                   [0.6494664, 1.8175879, 0.54270506],
                   [0.88719857, 1.2533717, 0.2260133],
                   [0.4808811, 1.3740282, 0.6581123],
                   [0.62408185, 1.3522696, 1.1172768]]]])

b = tf.constant([[[[1.1618697, 1.4683022, 0.5946915],
                   [2.0228429, 1.5750624, 0.8043457],
                   [1.0638641, 1.1678671, 0.4787041],
                   [1.0277432, 0.693445, 1.0249577],
                   [0.19050634, 1.057025, 0.44472182],
                   [1.3056083, 0.5151022, 9.0531322]],

                  [[1.2351526, 1.0919478, 0.9372109],
                   [1.5517414, 1.5060828, 0.35573858],
                   [1.0651671, 1.0787325, 0.47671747],
                   [1.7694534, 1.0008664, 0.32191408],
                   [1.0490249, 1.225679, 0.43457556],
                   [0.12941921, 0.6514527, 1.0955144]],

                  [[1.9279069, 1.8742791, 0.7065265],
                   [0.9121938, 1.4657009, 0.23585856],
                   [0.6494664, 1.8175879, 0.54270506],
                   [0.88719857, 1.2533717, 0.2260133],
                   [0.4808811, 1.3740282, 0.6581123],
                   [0.62408185, 1.3522696, 1.1172768]]],

                 [[[1.2834557, 1.4683022, 0.5946915],
                   [1.0228429, 1.5750624, 0.80770457],
                   [1.0638641, 1.1896071, 0.4787041],
                   [1.0277432, 0.6934045, 1.0249577],
                   [0.19050634, 1.057025, 0.44472182],
                   [1.3056083, 0.5151022, 1.0531322]],

                  [[1.2351526, 1.0919478, 0.9372109],
                   [1.5517414, 1.5060828, 0.35573858],
                   [1.0651671, 1.0787325, 0.47671747],
                   [1.7694534, 1.0008664, 0.32191408],
                   [1.0490249, 1.225679, 0.43457556],
                   [0.12941921, 0.6514527, 1.0955144]],

                  [[1.9279069, 1.8742791, 0.7065265],
                   [0.9121938, 1.4657009, 0.23585856],
                   [0.6494664, 1.8175879, 0.54270506],
                   [0.88719857, 1.2533717, 0.2260133],
                   [0.4808811, 1.3740282, 0.6581123],
                   [0.62408185, 1.3522696, 1.1172768]]]], dtype=tf.float32)
#
# c = tf.abs(a - b)
A = tf.compat.v1.placeholder(dtype=tf.float32, shape=[None, 3, 6, 3])
d = tf.reduce_mean(tf.abs(a - b))
with tf.compat.v1.Session() as sess:
    print(a)
    print(d)
    print("d: ", sess.run(d, feed_dict={A: a}))
    # print("b: ", b)
    # print("c: ", sess.run(c))
    # print("d: ", sess.run(d))
#     print("d: ", d)
#     print("e: ", sess.run(e))
